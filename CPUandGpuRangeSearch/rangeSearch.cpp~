#include "rangeSearch.h"




void initiateRangeSearch(rangeSearchSettings RangeSearchSettings)
{
	clock_t start, stop, start2,stop2;
	int totalNumberOfFiles = checkNumberOfProteinFilesInList(RangeSearchSettings.inputListFileLocation);
	AtomToNumHashTable atomReferenceTable;
	ProteinDataHandler heldProteinSets(RangeSearchSettings);
	
		

	
	typedef std::chrono::high_resolution_clock Clock;
    auto t1 = Clock::now();
    auto t2 = Clock::now();
    std::cout << t2-t1 << '\n';
	return;	



	start2=clock();
//	std::chrono::steady_clock::time_point begin = std::chrono::steady_clock::now();

	heldProteinSets.loadAllProteinsToArrays(RangeSearchSettings.inputListFileLocation, atomReferenceTable, RangeSearchSettings);
//	std::chrono::steady_clock::time_point end= std::chrono::steady_clock::now();


	stop2=clock();
	        print_elapsed(start2, stop2, /*"CPU KDTREE CONSTRUCTION TIME: "*/"load from esbtl time");
	
//	std::cout << "Time difference = " << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count() <<std::endl;
	
//std::cout << "Time difference = " << std::chrono::duration_cast<std::chrono::nanoseconds> (end - begin).count() <<std::endl;
	


//	return;
	start2=clock();
	heldProteinSets.populateXYZarrayForGPUProcessing();
	//start2=clock();
	constructKdTreesOnLoadedDataOnCPU(heldProteinSets);//should this be included in the run time of searching gpu kd trees?
	//constructKdTreesOnLoadedDataOnCPUWithGPUSorting(heldProteinSets);
//constructKdTreesOnLoadedDataOnGPU(heldProteinSets);
//	GPUTreeWithCPULoad(heldProteinSets);
	stop2 = clock();
	print_elapsed(start2, stop2, "KDTREE CONSTRUCTION TIME: ");
	std::cout << std::endl;
	

	clock_t start3, stop3;
	start3 = clock();
	heldProteinSets.setSecondarySearchStructure();//Should this be included in the run time of searching cpu based range searches?
	stop3 = clock();
	print_elapsed(start3, stop3, "CPU SECONDARY SEARCH STRUCTURE CONSTRUCTION TIME: ");
	std::cout<<std::endl;

//	generateStatistics(RangeSearchSettings, heldProteinSets, atomReferenceTable);
//	return;
	 if(RangeSearchSettings.searchType==-1){
                start = clock();
                hybridGpuCpuSearch(RangeSearchSettings, heldProteinSets, atomReferenceTable);
                stop = clock();
                std::cout << "RUN time for Hybrid BRUTE FORCE: ";
                print_elapsed(start, stop, "");
        }
	else if(RangeSearchSettings.searchType==0){
		start = clock();
		pureBruteForce(RangeSearchSettings, heldProteinSets, atomReferenceTable);
		stop = clock();
		std::cout << "RUN time for PURE CPU BRUTE FORCE: ";
		print_elapsed(start, stop, "");
	}	
	else if (RangeSearchSettings.searchType== 1){
		start = clock();
		//heldProteinSets.setSecondarySearchStructure();//Should this be included in the run time of searching cpu based range searches?
		cpuBruteForceRangeSearchAllLoadedSets(RangeSearchSettings, heldProteinSets, atomReferenceTable);
		stop = clock();
		print_elapsed(start, stop, "Run time for CPU BRUTE FORCE RANGE SEARCH: ");
	}
	else if (RangeSearchSettings.searchType == 2){
		start = clock();
		gpuBruteForceRangeSearchAllLoadedSets(RangeSearchSettings, heldProteinSets, atomReferenceTable);
		stop = clock();
		print_elapsed(start, stop, "Run time for SIMPLE GPU BRUTE FORCE RANGE SEARCH: ");
	}
	else if (RangeSearchSettings.searchType == 3){
		start = clock();
		bruteForceSearchAllAvailableFilesSingleGpuLoadedEntryAtATime(RangeSearchSettings, heldProteinSets, atomReferenceTable);
		stop = clock();
		print_elapsed(start, stop, "Run time for SINGLE LOAD GPU BRUTE FORCE RANGE SEARCH: ");
	}
	else if (RangeSearchSettings.searchType == 4){
		start = clock();
		bruteForceSearchAllAvailableFilesSeveralGpuLoadedEntrysAtATime(RangeSearchSettings, heldProteinSets, atomReferenceTable);
		stop = clock();
		print_elapsed(start, stop, "Run time for BATCH GPU Brute FORCE RANGE SEARCH: ");
	}
	else if (RangeSearchSettings.searchType == 5){
		start = clock();
		//heldProteinSets.setSecondarySearchStructure();//Should this be included in the run time of searching cpu based range searches?
		cpuKdTreeRangeSearch(RangeSearchSettings, heldProteinSets, atomReferenceTable);
		stop = clock();
		print_elapsed(start, stop, "Run time for CPU KD TREE RANGE SEARCH: ");
	}
	else if (RangeSearchSettings.searchType == 6){
	
		start = clock();
		gpuKdTreeUnoptimisedRangeSearchAllLoadedSets(RangeSearchSettings, heldProteinSets, atomReferenceTable);
		stop = clock();
		print_elapsed(start, stop, "Run time for SIMPLE GPU KD TREE RANGE SEARCH: ");
	}
	else if (RangeSearchSettings.searchType == 7){

		start = clock();
		kdTreeSearchAllAvailableFilesSingleGpuLoadedEntryAtATime(RangeSearchSettings, heldProteinSets, atomReferenceTable);
		stop = clock();
		print_elapsed(start, stop, "Run time for SINGLE LOAD GPU KD TREE RANGE SEARCH: ");
	} else if (RangeSearchSettings.searchType == 8)
	{

		start = clock();
		kdTreeSearchAllAvailableFilesSeveralGpuLoadedEntrysAtATime(RangeSearchSettings, heldProteinSets, atomReferenceTable);
		stop = clock();
		print_elapsed(start, stop, "Run time for GPU BATCH LOAD KD TREE RANGE SEARCH: ");
	}
	else if (RangeSearchSettings.searchType == 9)
	{
		multipleRunTimer(RangeSearchSettings, heldProteinSets, atomReferenceTable);
	}
	else if (RangeSearchSettings.searchType == 10)
	{

		std::cout << "Esoteric not yet included" << std::endl;
	}

	
}



void multipleRunTimer(rangeSearchSettings RangeSearchSettings, ProteinDataHandler &heldProteinSets, AtomToNumHashTable &atomReferenceTable)
{

	//bruteForceSearchAllAvailableFilesSeveralGpuLoadedEntrysAtATime(RangeSearchSettings, heldProteinSets, atomReferenceTable);
	//return;
	std::vector<multiRunDetailsSet> multiQuerySet;
	int numberOfSets;
	numberOfSets=loadMultiRunDetails(multiQuerySet, "multiRunTimer.txt");
	int originalRangeHolder[5];

	for (int i = 0; i < numberOfSets; i++)
	{

		RangeSearchSettings.AtomTypeOne = multiQuerySet[i].atom1;
		RangeSearchSettings.AtomTypeTwo = multiQuerySet[i].atom2;
		for (int j = 0; j < multiQuerySet[i].proximitiesCount; j++)
		{
			RangeSearchSettings.requiredProximity = multiQuerySet[i].proximities[j]*1000;
			for (int p = 0; p < multiQuerySet[i].entriesToSearchEachRound.size(); p++)
			{
				clock_t start, stop;
				//start = clock();
				//if (multiQuerySet[i].currentRange > -1)
				//{
					//for (int y = 0; y < 5; y++)
					//{
					//	originalRangeHolder[y] = heldProteinSets.ProteinDataHolder[y].heldEntries;
					//	heldProteinSets.ProteinDataHolder[y].heldEntries = 0;
					//}
					//heldProteinSets.ProteinDataHolder[multiQuerySet[i].currentRange].heldEntries = multiQuerySet[i].entriesToSearchEachRound[p];
				//}
				 if (multiQuerySet[i].searchType == -1)
                                {
                                        start = clock();
                                        hybridGpuCpuSearch(RangeSearchSettings, heldProteinSets, atomReferenceTable);
                                        stop = clock();
                                        std::cout << "RUN time for Hybrid Brute FORCE: Required Proximity: " << multiQuerySet[i].proximities[j] << " Entry count: " << multiQuerySet[i].entriesToSearchEachRound[p] << " Atom pair: " << RangeSearchSettings.AtomTypeOne << "--" << RangeSearchSettings.AtomTypeTwo << std::endl;
                                        print_elapsed(start, stop, "");
                                }

				else if (multiQuerySet[i].searchType == 0)
				{
					start = clock();
					pureBruteForce(RangeSearchSettings, heldProteinSets, atomReferenceTable);
					stop = clock();
					std::cout << "RUN time for PURE CPU BRUTE FORCE: Required Proximity: " << multiQuerySet[i].proximities[j] << " Entry count: " << multiQuerySet[i].entriesToSearchEachRound[p] << " Atom pair: " << RangeSearchSettings.AtomTypeOne << "--" << RangeSearchSettings.AtomTypeTwo << std::endl;
					print_elapsed(start, stop, "");
				}
				else if (multiQuerySet[i].searchType == 1)
				{
					 start = clock();	
					//heldProteinSets.setSecondarySearchStructure();
					cpuBruteForceRangeSearchAllLoadedSets(RangeSearchSettings, heldProteinSets, atomReferenceTable);
					stop = clock();
					std::cout << "RUN time for CPU BRUTE FORCE: Required Proximity: " << multiQuerySet[i].proximities[j] << " Entry count: " << multiQuerySet[i].entriesToSearchEachRound[p] << " Atom pair: " << RangeSearchSettings.AtomTypeOne << "--" << RangeSearchSettings.AtomTypeTwo << std::endl;
					print_elapsed(start, stop, "");
					

				
				}
				else if (multiQuerySet[i].searchType == 2)
				{
					 start = clock();
					gpuBruteForceRangeSearchAllLoadedSets(RangeSearchSettings, heldProteinSets, atomReferenceTable);
					stop = clock();
					std::cout << "RUN time for SIMPLE GPU BRUTE FORCE: Required Proximity: " << multiQuerySet[i].proximities[j] << " Entry count: " << multiQuerySet[i].entriesToSearchEachRound[p] << " Atom pair: " << RangeSearchSettings.AtomTypeOne << "--" << RangeSearchSettings.AtomTypeTwo << std::endl;
					print_elapsed(start, stop, "");

					
	
				}
				else if (multiQuerySet[i].searchType == 3)
				{
					 start = clock();
					bruteForceSearchAllAvailableFilesSingleGpuLoadedEntryAtATime(RangeSearchSettings, heldProteinSets, atomReferenceTable);
					stop = clock();
					std::cout << "Run time for SINGLE LOAD GPU BRUTE FORCE: Required Proximity: " << multiQuerySet[i].proximities[j] << " Entry count: " << multiQuerySet[i].entriesToSearchEachRound[p] << " Atom pair: " << RangeSearchSettings.AtomTypeOne << "--" << RangeSearchSettings.AtomTypeTwo << std::endl;
					print_elapsed(start, stop, "");

					
				}
				else if (multiQuerySet[i].searchType == 4)
				{
					 start = clock();
					bruteForceSearchAllAvailableFilesSeveralGpuLoadedEntrysAtATime(RangeSearchSettings, heldProteinSets, atomReferenceTable);
					stop = clock();
					std::cout << "RUN TIME for BATCH LOAD GPU BRUTE FORCE: Required Proximity: " << multiQuerySet[i].proximities[j] << " Entry count: " << multiQuerySet[i].entriesToSearchEachRound[p] << " Atom pair: " << RangeSearchSettings.AtomTypeOne << "--" << RangeSearchSettings.AtomTypeTwo << std::endl;
					print_elapsed(start, stop, "");
					
				}
				else if (multiQuerySet[i].searchType == 5)
				{
					 start = clock();
				//	heldProteinSets.setSecondarySearchStructure();//Should this be included in the run time of searching cpu based range searches?
					cpuKdTreeRangeSearch(RangeSearchSettings, heldProteinSets, atomReferenceTable);
					stop = clock();
					std::cout << "RUN time for CPU KDTREE: Required Proximity: " << multiQuerySet[i].proximities[j] << " Entry count: " << multiQuerySet[i].entriesToSearchEachRound[p] << " Atom pair: " << RangeSearchSettings.AtomTypeOne << "--" << RangeSearchSettings.AtomTypeTwo << std::endl;
					print_elapsed(start, stop, "");

				}
				else if (multiQuerySet[i].searchType == 6)
				{
					 start = clock();
					gpuKdTreeUnoptimisedRangeSearchAllLoadedSets(RangeSearchSettings, heldProteinSets, atomReferenceTable);
					stop = clock();
					std::cout << "RUN time for SIMPLE GPU KDTREE: Required Proximity: " << multiQuerySet[i].proximities[j] << " Entry count: " << multiQuerySet[i].entriesToSearchEachRound[p] << " Atom pair: " << RangeSearchSettings.AtomTypeOne << "--" << RangeSearchSettings.AtomTypeTwo << std::endl;
					print_elapsed(start, stop, "");
				}
				else if (multiQuerySet[i].searchType == 7)
				{
					 start = clock();
					kdTreeSearchAllAvailableFilesSingleGpuLoadedEntryAtATime(RangeSearchSettings, heldProteinSets, atomReferenceTable);
					stop = clock();
					std::cout << "RUN time for SINGLE LOAD GPU KDTREE: Required Proximity: " << multiQuerySet[i].proximities[j] << " Entry count: " << multiQuerySet[i].entriesToSearchEachRound[p] << " Atom pair: " << RangeSearchSettings.AtomTypeOne << "--" << RangeSearchSettings.AtomTypeTwo << std::endl;
					print_elapsed(start, stop, "");
				}
				else if (multiQuerySet[i].searchType == 8)
				{
					 start = clock();
					kdTreeSearchAllAvailableFilesSeveralGpuLoadedEntrysAtATime(RangeSearchSettings, heldProteinSets, atomReferenceTable);
					stop = clock();
					std::cout << "RUN time for BATCH LOAD GPU KDTREE: Required Proximity: " << multiQuerySet[i].proximities[j] << " Entry count: " << multiQuerySet[i].entriesToSearchEachRound[p] << " Atom pair: " << RangeSearchSettings.AtomTypeOne << "--" << RangeSearchSettings.AtomTypeTwo << std::endl;
					print_elapsed(start, stop, "");
				}

				if (multiQuerySet[i].currentRange > -1)
				{
					//for (int y = 0; y < 5; y++)
					//{
					//	heldProteinSets.ProteinDataHolder[y].heldEntries = originalRangeHolder[y];
					//}
					
				}

				
				std::cout << std::endl;
			}

			std::cout << std::endl << std::endl;
		}

	}


	return;

}

